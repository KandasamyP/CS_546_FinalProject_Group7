const mongoCollections = require("../config/mongoCollections");
const petAdopter = mongoCollections.petAdopter;
const shelterAndRescue = mongoCollections.shelterAndRescue;
var ObjectID = require("mongodb").ObjectID;

const exportedMethods = {
  async addSr(srData) {
    try {
      function validateEmail(email) {
        const re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return re.test(String(email).toLowerCase());
      }

      if (srData.email === undefined || srData.email.trim() === "") {
        throw {
          status: 400,
          error: "E-Mail not passed - Generated by '/data/getAPetData.js'.",
        };
      }

      if (!validateEmail(srData.email)) {
        throw {
          status: 400,
          error:
            "E-Mail not in correct format - Generated by '/data/getAPetData.js'.",
        };
      }

      if (srData.password === undefined || srData.password.trim() === "") {
        throw {
          status: 400,
          error: "Password not passed - Generated by '/data/getAPetData.js'.",
        };
      }

      if (srData.name === undefined || srData.name.trim() === "") {
        throw {
          status: 400,
          error:
            "Shelter/Rescue name not passed - Generated by '/data/getAPetData.js'.",
        };
      }

      if (
        srData.profilePicture === undefined ||
        srData.profilePicture.trim() === ""
      ) {
        throw {
          status: 400,
          error:
            "Profile Picture public URL not passed - Generated by '/data/getAPetData.js'.",
        };
      }

      if (srData.state === undefined || srData.state.trim() === "") {
        throw {
          status: 400,
          error:
            "Location State not passed - Generated by '/data/getAPetData.js'.",
        };
      }

      if (srData.city === undefined || srData.city.trim() === "") {
        throw {
          status: 400,
          error:
            "Location City not passed - Generated by '/data/getAPetData.js'.",
        };
      }

      if (srData.street === undefined || srData.street.trim() === "") {
        throw {
          status: 400,
          error:
            "Location Street not passed - Generated by '/data/getAPetData.js'.",
        };
      }

      if (srData.biography === undefined || srData.biography === "") {
        throw {
          status: 400,
          error: "Biography not passed - Generated by '/data/getAPetData.js'.",
        };
      }

      function validatePhoneNumber(phoneNumber) {
        const re = /^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/im;
        return re.test(String(phoneNumber));
      }

      if (srData.phoneNumber === undefined) {
        throw {
          status: 400,
          error:
            "Phone Number not passed - Generated by '/data/getAPetData.js'.",
        };
      }

      if (!validatePhoneNumber(srData.phoneNumber)) {
        throw {
          status: 400,
          error:
            "Phone Number not passed in correct format - Generated by '/data/getAPetData.js'.",
        };
      }
    } catch (e) {
      res.status(e.status).send({ title: "Error", error: e.error });
      return;
    }

    srData.availablePets = [];
    srData.adoptedPets = [];
    srData.reviews = [];
    srData.websiteFeedbackGiven = [];
    srData.location = {
      country: srData.country,
      state: srData.state,
      city: srData.city,
      street: srData.street,
      apartment: srData.apartment,
    };
    srData.socialMedia = {
      facebook: srData.facebook,
      instagram: srData.instagram,
      twitter: srData.twitter,
    };

    delete srData.country;
    delete srData.state;
    delete srData.city;
    delete srData.apartment;
    delete srData.facebook;
    delete srData.instagram;
    delete srData.twitter;

    try {
      const shelterAndRescueCollection = await shelterAndRescue();

      const newInsertInformation = await shelterAndRescueCollection.insertOne(
        srData
      );
      if (newInsertInformation.insertedCount === 0)
        throw {
          status: 500,
          error:
            "Failed to sign up user to DB - Generated by '/data/getAPetData.js'.",
        };

      return srData;
    } catch (e) {
      throw { status: e.status, error: e.error };
    }
  },

  async addPoPa(poPaData) {
    try {
      function validateEmail(email) {
        const re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return re.test(String(email).toLowerCase());
      }

      if (poPaData.email === undefined || poPaData.email.trim() === "") {
        throw {
          status: 400,
          error: "E-Mail not passed - Generated by '/data/getAPetData.js'.",
        };
      }

      if (!validateEmail(poPaData.email)) {
        throw {
          status: 400,
          error:
            "E-Mail not in correct format - Generated by '/data/getAPetData.js'.",
        };
      }

      if (poPaData.password === undefined || poPaData.password.trim() === "") {
        throw {
          status: 400,
          error: "Password not passed - Generated by '/data/getAPetData.js'.",
        };
      }

      if (poPaData.fname === undefined || poPaData.fname.trim() === "") {
        throw {
          status: 400,
          error: "First name not passed - Generated by '/data/getAPetData.js'.",
        };
      }

      if (poPaData.lname === undefined || poPaData.lname.trim() === "") {
        throw {
          status: 400,
          error: "Last name not passed - Generated by '/data/getAPetData.js'.",
        };
      }

      if (
        poPaData.dateOfBirth === undefined ||
        poPaData.dateOfBirth.trim() === ""
      ) {
        throw {
          status: 400,
          error: "DOB not passed - Generated by '/data/getAPetData.js'.",
        };
      }

      //Phone Number
      function validatePhoneNumber(phoneNumber) {
        const re = /^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/im;
        return re.test(String(phoneNumber));
      }
      if (poPaData.phoneNumber) {
        if (!validatePhoneNumber(poPaData.phoneNumber)) {
          throw {
            status: 400,
            error:
              "Phone Number not in correct format - Generated by '/data/getAPetData.js'.",
          };
        }
      }

      function validateZipCode(zipCode) {
        const re = /(^\d{5}$)|(^\d{5}-\d{4}$)/;
        return re.test(String(zipCode));
      }
      if (poPaData.zipCode) {
        if (!validateZipCode(poPaData.zipCode)) {
          throw {
            status: 400,
            error:
              "Zip Code not in correct format - Generated by '/data/getAPetData.js'.",
          };
        }
      }
    } catch (e) {
      throw { status: e.status, error: e.error };
    }

    poPaData.fullName = {
      fname: poPaData.fname,
      lname: poPaData.lname,
    };
    poPaData.favoritedPets = [];
    poPaData.websiteFeedbackGiven = [];
    poPaData.shelterReviewsGiven = [];
    poPaData.reportedPosts = [];
    poPaData.donatedItems = [];
    poPaData.isVolunteerCandidate = false;

    delete poPaData.fname;
    delete poPaData.lname;

    try {
      const petOwnerCollection = await petAdopter();

      const newInsertInformation = await petOwnerCollection.insertOne(poPaData);
      if (newInsertInformation.insertedCount === 0)
        throw {
          status: 500,
          error:
            "Failed to sign up user to DB - Generated by '/data/getAPetData.js'.",
        };

      return poPaData;
    } catch (e) {
      throw { status: e.status, error: e.error };
    }
  },
};

module.exports = exportedMethods;
